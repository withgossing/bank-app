# Bank Application Docker Compose Configuration
# MSA 아키텍처 기반 은행 애플리케이션

networks:
  bank-network:
    driver: bridge

volumes:
  postgres_user_data:
  postgres_account_data:
  postgres_product_data:
  rabbitmq_data:

services:
  # PostgreSQL - User Service DB
  postgres-user:
    image: postgres:16-alpine
    container_name: bank-postgres-user
    restart: unless-stopped
    environment:
      POSTGRES_DB: bank_user_db
      POSTGRES_USER: user_admin
      POSTGRES_PASSWORD: user_password_2024
      TZ: Asia/Seoul
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL - Account Service DB
  postgres-account:
    image: postgres:16-alpine
    container_name: bank-postgres-account
    restart: unless-stopped
    environment:
      POSTGRES_DB: bank_account_db
      POSTGRES_USER: account_admin
      POSTGRES_PASSWORD: account_password_2024
      TZ: Asia/Seoul
    volumes:
      - postgres_account_data:/var/lib/postgresql/data
    ports:
      - "25432:5432"
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U account_admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL - Product Service DB
  postgres-product:
    image: postgres:16-alpine
    container_name: bank-postgres-product
    restart: unless-stopped
    environment:
      POSTGRES_DB: bank_product_db
      POSTGRES_USER: product_admin
      POSTGRES_PASSWORD: product_password_2024
      TZ: Asia/Seoul
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
    ports:
      - "35432:5432"
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U product_admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: bank-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      TZ: Asia/Seoul
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    networks:
      - bank-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Eureka Service Discovery
  discovery-service:
    build: ./discovery-service
    image: bank/discovery-service:latest
    container_name: bank-discovery
    restart: unless-stopped
    ports:
      - "8761:8761"
    networks:
      - bank-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - TZ=Asia/Seoul
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway Service
  gateway-service:
    build: ./gateway-service
    image: bank/gateway-service:latest
    container_name: bank-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - bank-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - TZ=Asia/Seoul
    depends_on:
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build: ./user-service
    image: bank/user-service:latest
    container_name: bank-user-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      - bank-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/bank_user_db
      - SPRING_DATASOURCE_USERNAME=user_admin
      - SPRING_DATASOURCE_PASSWORD=user_password_2024
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_RABBITMQ_HOST=rabbitmq
      - TZ=Asia/Seoul
    depends_on:
      postgres-user:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Account Service
  account-service:
    build: ./account-service
    image: bank/account-service:latest
    container_name: bank-account-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    networks:
      - bank-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-account:5432/bank_account_db
      - SPRING_DATASOURCE_USERNAME=account_admin
      - SPRING_DATASOURCE_PASSWORD=account_password_2024
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_RABBITMQ_HOST=rabbitmq
      - TZ=Asia/Seoul
    depends_on:
      postgres-account:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build: ./product-service
    image: bank/product-service:latest
    container_name: bank-product-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    networks:
      - bank-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-product:5432/bank_product_db
      - SPRING_DATASOURCE_USERNAME=product_admin
      - SPRING_DATASOURCE_PASSWORD=product_password_2024
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_RABBITMQ_HOST=rabbitmq
      - TZ=Asia/Seoul
    depends_on:
      postgres-product:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build: ./frontend
    image: bank/frontend:latest
    container_name: bank-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - bank-network
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080
      - TZ=Asia/Seoul
    depends_on:
      - gateway-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: bank-adminer
    restart: unless-stopped
    ports:
      - "18080:8080"
    networks:
      - bank-network
    environment:
      - ADMINER_DEFAULT_SERVER=postgres-user
      - TZ=Asia/Seoul
